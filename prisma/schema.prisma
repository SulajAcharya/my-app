// This is your Prisma schema file,
//learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

  // datasource db {
  // provider = "postgresql"
  // url      = env("DATABASE_URL")
  // relationMode = "prisma"
  // }

datasource db {
  provider = "cockroachdb"
  url      = env("COCKROACHDB_URL")
}


// model Course {
//   id String @id @default(uuid())
//   userId String 
//   title String? @db
//   description String? @db.Text
//   imageUrl String? @db.Text
//   price Float?
//   isPublished Boolean @default(false)

//   categoryId String?
//   category Category? @relation(fields: [categoryId], references: [id])

//   attachments Attachment[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([categoryId])
// }

model Course {
  id String @id @default(uuid())
  userId String 
  title String?
  description String?
  imageUrl String?
  price Float?
  isPublished Boolean @default(false)

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])

  chapters Chapter[]

  attachments Attachment[]

  purchases Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Category{
  id String @id @default(uuid())
  name String @unique
  courses Course[]
}

model Attachment{
  id String @id @default(uuid())
  name String
  url String 

  CourseId String
  course Course @relation(fields: [CourseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([CourseId])
}

model Chapter{
  id String @id @default(uuid())
  title String
  description String? 
  videoUrl String?
  position Int
  isPublished Boolean @default(false)
  isfree Boolean @default(false)

  muxData MuxData?

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData{
  id String @id @default(uuid())
  assetsId String
  playbackId String?

  chapterId String @unique 
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade) 
}

model UserProgress{
  id String @id @default(uuid())
  userId String

  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase{
  id String @id @default(uuid())
  userId String

  courseId String
  course Course @relation(fields: [courseId], references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([courseId])
}

model StripeCustomer{
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}